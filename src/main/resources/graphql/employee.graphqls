scalar LocalDate

extend type QueryResolver {
    employees: [Employee]
    employeesWithFilter(filter: EmployeeFilter): [Employee]
    employee(id: ID!): Employee!
}

extend type MutationResolver {
    newEmployee(employee: EmployeeInput!): Employee
    updateEmployee(id: ID!, employee: EmployeeInput!): Employee!
    deleteEmployee(id: ID!): Boolean
}

input EmployeeInput {
    firstName: String!
    lastName: String!
    position: String!
    salary: Int
    age: Int
    birthday: LocalDate
    departmentId: Int!
}

type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    position: String!
    salary: Int
    age: Int
    birthday: LocalDate
    department: Department
}

input EmployeeFilter {
    salary: FilterField
    age: FilterField
    position: FilterField
    birthday: FilterField
}

input FilterField {
    operator: String!
    value: String!
}

schema {
    query: QueryResolver
    mutation: MutationResolver
}
